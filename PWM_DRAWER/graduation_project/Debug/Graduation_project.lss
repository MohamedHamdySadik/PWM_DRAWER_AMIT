
Graduation_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000d8c  00000e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080008a  0080008a  00000e4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001583  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ad  00000000  00000000  00002563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3d  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00003950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000639  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008de  00000000  00000000  00004271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004b4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  18:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_6>
  1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  40:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	00 00       	nop
  56:	00 00       	nop
  58:	00 00       	nop
  5a:	00 5f       	subi	r16, 0xF0	; 240
  5c:	00 00       	nop
  5e:	00 07       	cpc	r16, r16
  60:	00 07       	cpc	r16, r16
  62:	00 14       	cp	r0, r0
  64:	7f 14       	cp	r7, r15
  66:	7f 14       	cp	r7, r15
  68:	24 2a       	or	r2, r20
  6a:	7f 2a       	or	r7, r31
  6c:	12 23       	and	r17, r18
  6e:	13 08       	sbc	r1, r3
  70:	64 62       	ori	r22, 0x24	; 36
  72:	36 49       	sbci	r19, 0x96	; 150
  74:	55 22       	and	r5, r21
  76:	50 00       	.word	0x0050	; ????
  78:	05 03       	mulsu	r16, r21
  7a:	00 00       	nop
  7c:	00 1c       	adc	r0, r0
  7e:	22 41       	sbci	r18, 0x12	; 18
  80:	00 00       	nop
  82:	41 22       	and	r4, r17
  84:	1c 00       	.word	0x001c	; ????
  86:	08 2a       	or	r0, r24
  88:	1c 2a       	or	r1, r28
  8a:	08 08       	sbc	r0, r8
  8c:	08 3e       	cpi	r16, 0xE8	; 232
  8e:	08 08       	sbc	r0, r8
  90:	00 50       	subi	r16, 0x00	; 0
  92:	30 00       	.word	0x0030	; ????
  94:	00 08       	sbc	r0, r0
  96:	08 08       	sbc	r0, r8
  98:	08 08       	sbc	r0, r8
  9a:	00 30       	cpi	r16, 0x00	; 0
  9c:	30 00       	.word	0x0030	; ????
  9e:	00 20       	and	r0, r0
  a0:	10 08       	sbc	r1, r0
  a2:	04 02       	muls	r16, r20
  a4:	3e 51       	subi	r19, 0x1E	; 30
  a6:	49 45       	sbci	r20, 0x59	; 89
  a8:	3e 00       	.word	0x003e	; ????
  aa:	42 7f       	andi	r20, 0xF2	; 242
  ac:	40 00       	.word	0x0040	; ????
  ae:	42 61       	ori	r20, 0x12	; 18
  b0:	51 49       	sbci	r21, 0x91	; 145
  b2:	46 21       	and	r20, r6
  b4:	41 45       	sbci	r20, 0x51	; 81
  b6:	4b 31       	cpi	r20, 0x1B	; 27
  b8:	18 14       	cp	r1, r8
  ba:	12 7f       	andi	r17, 0xF2	; 242
  bc:	10 27       	eor	r17, r16
  be:	45 45       	sbci	r20, 0x55	; 85
  c0:	45 39       	cpi	r20, 0x95	; 149
  c2:	3c 4a       	sbci	r19, 0xAC	; 172
  c4:	49 49       	sbci	r20, 0x99	; 153
  c6:	30 01       	movw	r6, r0
  c8:	71 09       	sbc	r23, r1
  ca:	05 03       	mulsu	r16, r21
  cc:	36 49       	sbci	r19, 0x96	; 150
  ce:	49 49       	sbci	r20, 0x99	; 153
  d0:	36 06       	cpc	r3, r22
  d2:	49 49       	sbci	r20, 0x99	; 153
  d4:	29 1e       	adc	r2, r25
  d6:	00 36       	cpi	r16, 0x60	; 96
  d8:	36 00       	.word	0x0036	; ????
  da:	00 00       	nop
  dc:	56 36       	cpi	r21, 0x66	; 102
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	14 22       	and	r1, r20
  e4:	41 14       	cp	r4, r1
  e6:	14 14       	cp	r1, r4
  e8:	14 14       	cp	r1, r4
  ea:	41 22       	and	r4, r17
  ec:	14 08       	sbc	r1, r4
  ee:	00 02       	muls	r16, r16
  f0:	01 51       	subi	r16, 0x11	; 17
  f2:	09 06       	cpc	r0, r25
  f4:	32 49       	sbci	r19, 0x92	; 146
  f6:	79 41       	sbci	r23, 0x19	; 25
  f8:	3e 7e       	andi	r19, 0xEE	; 238
  fa:	11 11       	cpse	r17, r1
  fc:	11 7e       	andi	r17, 0xE1	; 225
  fe:	7f 49       	sbci	r23, 0x9F	; 159
 100:	49 49       	sbci	r20, 0x99	; 153
 102:	36 3e       	cpi	r19, 0xE6	; 230
 104:	41 41       	sbci	r20, 0x11	; 17
 106:	41 22       	and	r4, r17
 108:	7f 41       	sbci	r23, 0x1F	; 31
 10a:	41 22       	and	r4, r17
 10c:	1c 7f       	andi	r17, 0xFC	; 252
 10e:	49 49       	sbci	r20, 0x99	; 153
 110:	49 41       	sbci	r20, 0x19	; 25
 112:	7f 09       	sbc	r23, r15
 114:	09 01       	movw	r0, r18
 116:	01 3e       	cpi	r16, 0xE1	; 225
 118:	41 41       	sbci	r20, 0x11	; 17
 11a:	51 32       	cpi	r21, 0x21	; 33
 11c:	7f 08       	sbc	r7, r15
 11e:	08 08       	sbc	r0, r8
 120:	7f 00       	.word	0x007f	; ????
 122:	41 7f       	andi	r20, 0xF1	; 241
 124:	41 00       	.word	0x0041	; ????
 126:	20 40       	sbci	r18, 0x00	; 0
 128:	41 3f       	cpi	r20, 0xF1	; 241
 12a:	01 7f       	andi	r16, 0xF1	; 241
 12c:	08 14       	cp	r0, r8
 12e:	22 41       	sbci	r18, 0x12	; 18
 130:	7f 40       	sbci	r23, 0x0F	; 15
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	40 7f       	andi	r20, 0xF0	; 240
 136:	02 04       	cpc	r0, r2
 138:	02 7f       	andi	r16, 0xF2	; 242
 13a:	7f 04       	cpc	r7, r15
 13c:	08 10       	cpse	r0, r8
 13e:	7f 3e       	cpi	r23, 0xEF	; 239
 140:	41 41       	sbci	r20, 0x11	; 17
 142:	41 3e       	cpi	r20, 0xE1	; 225
 144:	7f 09       	sbc	r23, r15
 146:	09 09       	sbc	r16, r9
 148:	06 3e       	cpi	r16, 0xE6	; 230
 14a:	41 51       	subi	r20, 0x11	; 17
 14c:	21 5e       	subi	r18, 0xE1	; 225
 14e:	7f 09       	sbc	r23, r15
 150:	19 29       	or	r17, r9
 152:	46 46       	sbci	r20, 0x66	; 102
 154:	49 49       	sbci	r20, 0x99	; 153
 156:	49 31       	cpi	r20, 0x19	; 25
 158:	01 01       	movw	r0, r2
 15a:	7f 01       	movw	r14, r30
 15c:	01 3f       	cpi	r16, 0xF1	; 241
 15e:	40 40       	sbci	r20, 0x00	; 0
 160:	40 3f       	cpi	r20, 0xF0	; 240
 162:	1f 20       	and	r1, r15
 164:	40 20       	and	r4, r0
 166:	1f 7f       	andi	r17, 0xFF	; 255
 168:	20 18       	sub	r2, r0
 16a:	20 7f       	andi	r18, 0xF0	; 240
 16c:	63 14       	cp	r6, r3
 16e:	08 14       	cp	r0, r8
 170:	63 03       	mulsu	r22, r19
 172:	04 78       	andi	r16, 0x84	; 132
 174:	04 03       	mulsu	r16, r20
 176:	61 51       	subi	r22, 0x11	; 17
 178:	49 45       	sbci	r20, 0x59	; 89
 17a:	43 00       	.word	0x0043	; ????
 17c:	00 7f       	andi	r16, 0xF0	; 240
 17e:	41 41       	sbci	r20, 0x11	; 17
 180:	02 04       	cpc	r0, r2
 182:	08 10       	cpse	r0, r8
 184:	20 41       	sbci	r18, 0x10	; 16
 186:	41 7f       	andi	r20, 0xF1	; 241
 188:	00 00       	nop
 18a:	04 02       	muls	r16, r20
 18c:	01 02       	muls	r16, r17
 18e:	04 40       	sbci	r16, 0x04	; 4
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	40 40       	sbci	r20, 0x00	; 0
 194:	00 01       	movw	r0, r0
 196:	02 04       	cpc	r0, r2
 198:	00 20       	and	r0, r0
 19a:	54 54       	subi	r21, 0x44	; 68
 19c:	54 78       	andi	r21, 0x84	; 132
 19e:	7f 48       	sbci	r23, 0x8F	; 143
 1a0:	44 44       	sbci	r20, 0x44	; 68
 1a2:	38 38       	cpi	r19, 0x88	; 136
 1a4:	44 44       	sbci	r20, 0x44	; 68
 1a6:	44 20       	and	r4, r4
 1a8:	38 44       	sbci	r19, 0x48	; 72
 1aa:	44 48       	sbci	r20, 0x84	; 132
 1ac:	7f 38       	cpi	r23, 0x8F	; 143
 1ae:	54 54       	subi	r21, 0x44	; 68
 1b0:	54 18       	sub	r5, r4
 1b2:	08 7e       	andi	r16, 0xE8	; 232
 1b4:	09 01       	movw	r0, r18
 1b6:	02 08       	sbc	r0, r2
 1b8:	14 54       	subi	r17, 0x44	; 68
 1ba:	54 3c       	cpi	r21, 0xC4	; 196
 1bc:	7f 08       	sbc	r7, r15
 1be:	04 04       	cpc	r0, r4
 1c0:	78 00       	.word	0x0078	; ????
 1c2:	44 7d       	andi	r20, 0xD4	; 212
 1c4:	40 00       	.word	0x0040	; ????
 1c6:	20 40       	sbci	r18, 0x00	; 0
 1c8:	44 3d       	cpi	r20, 0xD4	; 212
 1ca:	00 00       	nop
 1cc:	7f 10       	cpse	r7, r15
 1ce:	28 44       	sbci	r18, 0x48	; 72
 1d0:	00 41       	sbci	r16, 0x10	; 16
 1d2:	7f 40       	sbci	r23, 0x0F	; 15
 1d4:	00 7c       	andi	r16, 0xC0	; 192
 1d6:	04 18       	sub	r0, r4
 1d8:	04 78       	andi	r16, 0x84	; 132
 1da:	7c 08       	sbc	r7, r12
 1dc:	04 04       	cpc	r0, r4
 1de:	78 38       	cpi	r23, 0x88	; 136
 1e0:	44 44       	sbci	r20, 0x44	; 68
 1e2:	44 38       	cpi	r20, 0x84	; 132
 1e4:	7c 14       	cp	r7, r12
 1e6:	14 14       	cp	r1, r4
 1e8:	08 08       	sbc	r0, r8
 1ea:	14 14       	cp	r1, r4
 1ec:	18 7c       	andi	r17, 0xC8	; 200
 1ee:	7c 08       	sbc	r7, r12
 1f0:	04 04       	cpc	r0, r4
 1f2:	08 48       	sbci	r16, 0x88	; 136
 1f4:	54 54       	subi	r21, 0x44	; 68
 1f6:	54 20       	and	r5, r4
 1f8:	04 3f       	cpi	r16, 0xF4	; 244
 1fa:	44 40       	sbci	r20, 0x04	; 4
 1fc:	20 3c       	cpi	r18, 0xC0	; 192
 1fe:	40 40       	sbci	r20, 0x00	; 0
 200:	20 7c       	andi	r18, 0xC0	; 192
 202:	1c 20       	and	r1, r12
 204:	40 20       	and	r4, r0
 206:	1c 3c       	cpi	r17, 0xCC	; 204
 208:	40 30       	cpi	r20, 0x00	; 0
 20a:	40 3c       	cpi	r20, 0xC0	; 192
 20c:	44 28       	or	r4, r4
 20e:	10 28       	or	r1, r0
 210:	44 0c       	add	r4, r4
 212:	50 50       	subi	r21, 0x00	; 0
 214:	50 3c       	cpi	r21, 0xC0	; 192
 216:	44 64       	ori	r20, 0x44	; 68
 218:	54 4c       	sbci	r21, 0xC4	; 196
 21a:	44 00       	.word	0x0044	; ????
 21c:	08 36       	cpi	r16, 0x68	; 104
 21e:	41 00       	.word	0x0041	; ????
 220:	00 00       	nop
 222:	7f 00       	.word	0x007f	; ????
 224:	00 00       	nop
 226:	41 36       	cpi	r20, 0x61	; 97
 228:	08 00       	.word	0x0008	; ????
 22a:	08 08       	sbc	r0, r8
 22c:	2a 1c       	adc	r2, r10
 22e:	08 08       	sbc	r0, r8
 230:	1c 2a       	or	r1, r28
 232:	08 08       	sbc	r0, r8

00000234 <__ctors_end>:
 234:	11 24       	eor	r1, r1
 236:	1f be       	out	0x3f, r1	; 63
 238:	cf e5       	ldi	r28, 0x5F	; 95
 23a:	d8 e0       	ldi	r29, 0x08	; 8
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
 240:	10 e0       	ldi	r17, 0x00	; 0
 242:	a0 e6       	ldi	r26, 0x60	; 96
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	ec e8       	ldi	r30, 0x8C	; 140
 248:	fd e0       	ldi	r31, 0x0D	; 13
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
 24c:	05 90       	lpm	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	aa 38       	cpi	r26, 0x8A	; 138
 252:	b1 07       	cpc	r27, r17
 254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	aa e8       	ldi	r26, 0x8A	; 138
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
 25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
 260:	a6 39       	cpi	r26, 0x96	; 150
 262:	b2 07       	cpc	r27, r18
 264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
 266:	0e 94 d7 03 	call	0x7ae	; 0x7ae <main>
 26a:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <_exit>

0000026e <__bad_interrupt>:
 26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	APP_edgeProcessing();
 294:	0e 94 24 03 	call	0x648	; 0x648 <APP_edgeProcessing>
}
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
 2ba:	fc 01       	movw	r30, r24
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
 2bc:	91 b3       	in	r25, 0x11	; 17
 2be:	9f 7b       	andi	r25, 0xBF	; 191
 2c0:	91 bb       	out	0x11, r25	; 17
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
 2c2:	9e b5       	in	r25, 0x2e	; 46
 2c4:	20 81       	ld	r18, Z
 2c6:	98 7f       	andi	r25, 0xF8	; 248
 2c8:	92 2b       	or	r25, r18
 2ca:	9e bd       	out	0x2e, r25	; 46
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
 2cc:	2e b5       	in	r18, 0x2e	; 46
 2ce:	91 81       	ldd	r25, Z+1	; 0x01
 2d0:	30 e4       	ldi	r19, 0x40	; 64
 2d2:	93 9f       	mul	r25, r19
 2d4:	c0 01       	movw	r24, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	92 2f       	mov	r25, r18
 2da:	9f 7b       	andi	r25, 0xBF	; 191
 2dc:	89 2b       	or	r24, r25
 2de:	8e bd       	out	0x2e, r24	; 46

	/* Initial Value for Timer1 */
	TCNT1 = 0;
 2e0:	1d bc       	out	0x2d, r1	; 45
 2e2:	1c bc       	out	0x2c, r1	; 44

	/* Initial Value for the input capture register */
	ICR1 = 0;
 2e4:	17 bc       	out	0x27, r1	; 39
 2e6:	16 bc       	out	0x26, r1	; 38

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
 2e8:	89 b7       	in	r24, 0x39	; 57
 2ea:	80 62       	ori	r24, 0x20	; 32
 2ec:	89 bf       	out	0x39, r24	; 57
 2ee:	08 95       	ret

000002f0 <Icu_setEdgeDetectionType>:
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
	/*
	 * insert the required edge type in ICES1 bit sin TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);//0b10111111
 2f0:	2e b5       	in	r18, 0x2e	; 46
 2f2:	30 e4       	ldi	r19, 0x40	; 64
 2f4:	83 9f       	mul	r24, r19
 2f6:	c0 01       	movw	r24, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 7b       	andi	r18, 0xBF	; 191
 2fc:	82 2b       	or	r24, r18
 2fe:	8e bd       	out	0x2e, r24	; 46
 300:	08 95       	ret

00000302 <Icu_getInputCaptureValue>:
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
unsigned short Icu_getInputCaptureValue(void)
{
	return ICR1;
 302:	86 b5       	in	r24, 0x26	; 38
 304:	97 b5       	in	r25, 0x27	; 39
}
 306:	08 95       	ret

00000308 <Icu_clearTimerValue>:
/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
	TCNT1 = 0;
 308:	1d bc       	out	0x2d, r1	; 45
 30a:	1c bc       	out	0x2c, r1	; 44
 30c:	08 95       	ret

0000030e <GLCD_Delay>:
//-------------------------------------------------------------------------------------------------
// Delay function
//-------------------------------------------------------------------------------------------------
void GLCD_Delay(void)
{
asm("nop");
 30e:	00 00       	nop
 310:	08 95       	ret

00000312 <GLCD_EnableController>:
//-------------------------------------------------------------------------------------------------
// Enalbe Controller (0-2)
//-------------------------------------------------------------------------------------------------
void GLCD_EnableController(unsigned char controller)
{
switch(controller){
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	41 f0       	breq	.+16     	; 0x326 <GLCD_EnableController+0x14>
 316:	18 f0       	brcs	.+6      	; 0x31e <GLCD_EnableController+0xc>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	49 f0       	breq	.+18     	; 0x32e <GLCD_EnableController+0x1c>
 31c:	08 95       	ret
	case 0 : KS0108_CTRL_PORT &= ~KS0108_CS1; break;
 31e:	85 b3       	in	r24, 0x15	; 21
 320:	8f 7e       	andi	r24, 0xEF	; 239
 322:	85 bb       	out	0x15, r24	; 21
 324:	08 95       	ret
	case 1 : KS0108_CTRL_PORT &= ~KS0108_CS2; break;
 326:	85 b3       	in	r24, 0x15	; 21
 328:	87 7f       	andi	r24, 0xF7	; 247
 32a:	85 bb       	out	0x15, r24	; 21
 32c:	08 95       	ret
	case 2 : KS0108_CTRL_PORT &= ~KS0108_CS3; break;
 32e:	85 b3       	in	r24, 0x15	; 21
 330:	87 7f       	andi	r24, 0xF7	; 247
 332:	85 bb       	out	0x15, r24	; 21
 334:	08 95       	ret

00000336 <GLCD_DisableController>:
//-------------------------------------------------------------------------------------------------
// Disable Controller (0-2)
//-------------------------------------------------------------------------------------------------
void GLCD_DisableController(unsigned char controller)
{
switch(controller){
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	41 f0       	breq	.+16     	; 0x34a <GLCD_DisableController+0x14>
 33a:	18 f0       	brcs	.+6      	; 0x342 <GLCD_DisableController+0xc>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	49 f0       	breq	.+18     	; 0x352 <GLCD_DisableController+0x1c>
 340:	08 95       	ret
	case 0 : KS0108_CTRL_PORT |= KS0108_CS1; break;
 342:	85 b3       	in	r24, 0x15	; 21
 344:	80 61       	ori	r24, 0x10	; 16
 346:	85 bb       	out	0x15, r24	; 21
 348:	08 95       	ret
	case 1 : KS0108_CTRL_PORT |= KS0108_CS2; break;
 34a:	85 b3       	in	r24, 0x15	; 21
 34c:	88 60       	ori	r24, 0x08	; 8
 34e:	85 bb       	out	0x15, r24	; 21
 350:	08 95       	ret
	case 2 : KS0108_CTRL_PORT |= KS0108_CS3; break;
 352:	85 b3       	in	r24, 0x15	; 21
 354:	88 60       	ori	r24, 0x08	; 8
 356:	85 bb       	out	0x15, r24	; 21
 358:	08 95       	ret

0000035a <GLCD_ReadStatus>:
}
//-------------------------------------------------------------------------------------------------
// Read Status from specified controller (0-2)
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadStatus(unsigned char controller)
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	c8 2f       	mov	r28, r24
unsigned char status;
KS0108_DATA_DIR = 0x00;
 360:	1a ba       	out	0x1a, r1	; 26
KS0108_CTRL_PORT |= KS0108_RW;
 362:	85 b3       	in	r24, 0x15	; 21
 364:	82 60       	ori	r24, 0x02	; 2
 366:	85 bb       	out	0x15, r24	; 21
KS0108_CTRL_PORT &= ~KS0108_RS;
 368:	85 b3       	in	r24, 0x15	; 21
 36a:	8e 7f       	andi	r24, 0xFE	; 254
 36c:	85 bb       	out	0x15, r24	; 21
GLCD_EnableController(controller);
 36e:	8c 2f       	mov	r24, r28
 370:	0e 94 89 01 	call	0x312	; 0x312 <GLCD_EnableController>
KS0108_CTRL_PORT |= KS0108_EN;
 374:	85 b3       	in	r24, 0x15	; 21
 376:	84 60       	ori	r24, 0x04	; 4
 378:	85 bb       	out	0x15, r24	; 21
GLCD_Delay();
 37a:	0e 94 87 01 	call	0x30e	; 0x30e <GLCD_Delay>
status = KS0108_DATA_PIN;
 37e:	d9 b3       	in	r29, 0x19	; 25
KS0108_CTRL_PORT &= ~KS0108_EN;
 380:	85 b3       	in	r24, 0x15	; 21
 382:	8b 7f       	andi	r24, 0xFB	; 251
 384:	85 bb       	out	0x15, r24	; 21
GLCD_DisableController(controller);
 386:	8c 2f       	mov	r24, r28
 388:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisableController>
return status;
}
 38c:	8d 2f       	mov	r24, r29
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <GLCD_WriteCommand>:
//-------------------------------------------------------------------------------------------------
// Write command to specified controller
//-------------------------------------------------------------------------------------------------
void GLCD_WriteCommand(unsigned char commandToWrite, unsigned char controller)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	d8 2f       	mov	r29, r24
 39a:	c6 2f       	mov	r28, r22
while(GLCD_ReadStatus(controller)&DISPLAY_STATUS_BUSY);
 39c:	8c 2f       	mov	r24, r28
 39e:	0e 94 ad 01 	call	0x35a	; 0x35a <GLCD_ReadStatus>
 3a2:	88 23       	and	r24, r24
 3a4:	dc f3       	brlt	.-10     	; 0x39c <GLCD_WriteCommand+0x8>
KS0108_DATA_DIR = 0xFF;
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	8a bb       	out	0x1a, r24	; 26
KS0108_CTRL_PORT &= ~(KS0108_RW | KS0108_RS);
 3aa:	85 b3       	in	r24, 0x15	; 21
 3ac:	8c 7f       	andi	r24, 0xFC	; 252
 3ae:	85 bb       	out	0x15, r24	; 21
GLCD_EnableController(controller);
 3b0:	8c 2f       	mov	r24, r28
 3b2:	0e 94 89 01 	call	0x312	; 0x312 <GLCD_EnableController>
KS0108_DATA_PORT = commandToWrite;
 3b6:	db bb       	out	0x1b, r29	; 27
KS0108_CTRL_PORT |= KS0108_EN;
 3b8:	85 b3       	in	r24, 0x15	; 21
 3ba:	84 60       	ori	r24, 0x04	; 4
 3bc:	85 bb       	out	0x15, r24	; 21
GLCD_Delay();
 3be:	0e 94 87 01 	call	0x30e	; 0x30e <GLCD_Delay>
KS0108_CTRL_PORT &= ~KS0108_EN;
 3c2:	85 b3       	in	r24, 0x15	; 21
 3c4:	8b 7f       	andi	r24, 0xFB	; 251
 3c6:	85 bb       	out	0x15, r24	; 21
GLCD_DisableController(controller);
 3c8:	8c 2f       	mov	r24, r28
 3ca:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisableController>
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <GLCD_ReadData>:
//-------------------------------------------------------------------------------------------------
// Read data from current position
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadData(void)
{
 3d4:	cf 93       	push	r28
unsigned char data;
while(GLCD_ReadStatus(screen_x / 64)&DISPLAY_STATUS_BUSY);
 3d6:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 3da:	82 95       	swap	r24
 3dc:	86 95       	lsr	r24
 3de:	86 95       	lsr	r24
 3e0:	83 70       	andi	r24, 0x03	; 3
 3e2:	0e 94 ad 01 	call	0x35a	; 0x35a <GLCD_ReadStatus>
 3e6:	88 23       	and	r24, r24
 3e8:	b4 f3       	brlt	.-20     	; 0x3d6 <GLCD_ReadData+0x2>
KS0108_DATA_DIR = 0x00;
 3ea:	1a ba       	out	0x1a, r1	; 26
KS0108_CTRL_PORT |= (KS0108_RW | KS0108_RS);
 3ec:	85 b3       	in	r24, 0x15	; 21
 3ee:	83 60       	ori	r24, 0x03	; 3
 3f0:	85 bb       	out	0x15, r24	; 21
GLCD_EnableController(screen_x / 64);
 3f2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 3f6:	82 95       	swap	r24
 3f8:	86 95       	lsr	r24
 3fa:	86 95       	lsr	r24
 3fc:	83 70       	andi	r24, 0x03	; 3
 3fe:	0e 94 89 01 	call	0x312	; 0x312 <GLCD_EnableController>
//GLCD_Delay();
KS0108_CTRL_PORT |= KS0108_EN;
 402:	85 b3       	in	r24, 0x15	; 21
 404:	84 60       	ori	r24, 0x04	; 4
 406:	85 bb       	out	0x15, r24	; 21
GLCD_Delay();
 408:	0e 94 87 01 	call	0x30e	; 0x30e <GLCD_Delay>
data = KS0108_DATA_PIN;
 40c:	c9 b3       	in	r28, 0x19	; 25
KS0108_CTRL_PORT &= ~KS0108_EN;
 40e:	85 b3       	in	r24, 0x15	; 21
 410:	8b 7f       	andi	r24, 0xFB	; 251
 412:	85 bb       	out	0x15, r24	; 21
GLCD_DisableController(screen_x / 64);
 414:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 418:	82 95       	swap	r24
 41a:	86 95       	lsr	r24
 41c:	86 95       	lsr	r24
 41e:	83 70       	andi	r24, 0x03	; 3
 420:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisableController>
screen_x++;
 424:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 428:	8f 5f       	subi	r24, 0xFF	; 255
 42a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <screen_x>
return data;
}
 42e:	8c 2f       	mov	r24, r28
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <GLCD_WriteData>:
//-------------------------------------------------------------------------------------------------
// Write data to current position
//-------------------------------------------------------------------------------------------------
void GLCD_WriteData(unsigned char dataToWrite)
{
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24
while(GLCD_ReadStatus(screen_x / 64)&DISPLAY_STATUS_BUSY);
 438:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 43c:	82 95       	swap	r24
 43e:	86 95       	lsr	r24
 440:	86 95       	lsr	r24
 442:	83 70       	andi	r24, 0x03	; 3
 444:	0e 94 ad 01 	call	0x35a	; 0x35a <GLCD_ReadStatus>
 448:	88 23       	and	r24, r24
 44a:	b4 f3       	brlt	.-20     	; 0x438 <GLCD_WriteData+0x4>
KS0108_DATA_DIR = 0xFF;
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	8a bb       	out	0x1a, r24	; 26
KS0108_CTRL_PORT &= ~KS0108_RW;
 450:	85 b3       	in	r24, 0x15	; 21
 452:	8d 7f       	andi	r24, 0xFD	; 253
 454:	85 bb       	out	0x15, r24	; 21
KS0108_CTRL_PORT |= KS0108_RS;
 456:	85 b3       	in	r24, 0x15	; 21
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	85 bb       	out	0x15, r24	; 21
KS0108_DATA_PORT = dataToWrite;
 45c:	cb bb       	out	0x1b, r28	; 27
GLCD_EnableController(screen_x / 64);
 45e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 462:	82 95       	swap	r24
 464:	86 95       	lsr	r24
 466:	86 95       	lsr	r24
 468:	83 70       	andi	r24, 0x03	; 3
 46a:	0e 94 89 01 	call	0x312	; 0x312 <GLCD_EnableController>
KS0108_CTRL_PORT |= KS0108_EN;
 46e:	85 b3       	in	r24, 0x15	; 21
 470:	84 60       	ori	r24, 0x04	; 4
 472:	85 bb       	out	0x15, r24	; 21
GLCD_Delay();
 474:	0e 94 87 01 	call	0x30e	; 0x30e <GLCD_Delay>
KS0108_CTRL_PORT &= ~KS0108_EN;
 478:	85 b3       	in	r24, 0x15	; 21
 47a:	8b 7f       	andi	r24, 0xFB	; 251
 47c:	85 bb       	out	0x15, r24	; 21
GLCD_DisableController(screen_x / 64);
 47e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 482:	82 95       	swap	r24
 484:	86 95       	lsr	r24
 486:	86 95       	lsr	r24
 488:	83 70       	andi	r24, 0x03	; 3
 48a:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisableController>
screen_x++;
 48e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <screen_x>
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <screen_x>
}
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <GLCD_InitalizePorts>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_InitalizePorts(void)
{
KS0108_CTRL_DIR |= (KS0108_CS1 | KS0108_CS2 | KS0108_CS3 | KS0108_RS | KS0108_RW | KS0108_EN);
 49c:	84 b3       	in	r24, 0x14	; 20
 49e:	8f 61       	ori	r24, 0x1F	; 31
 4a0:	84 bb       	out	0x14, r24	; 20
KS0108_CTRL_PORT |= (KS0108_CS1 | KS0108_CS2 | KS0108_CS3);
 4a2:	85 b3       	in	r24, 0x15	; 21
 4a4:	88 61       	ori	r24, 0x18	; 24
 4a6:	85 bb       	out	0x15, r24	; 21
 4a8:	08 95       	ret

000004aa <GLCD_ReadByteFromROMMemory>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadByteFromROMMemory(char * ptr)
{
return pgm_read_byte(ptr);
 4aa:	fc 01       	movw	r30, r24
 4ac:	84 91       	lpm	r24, Z
}
 4ae:	08 95       	ret

000004b0 <GLCD_Initalize>:
//-------------------------------------------------------------------------------------------------
//initialization GLCD 
//-------------------------------------------------------------------------------------------------

void GLCD_Initalize(void)
{
 4b0:	cf 93       	push	r28
unsigned char i;
GLCD_InitalizePorts();
 4b2:	0e 94 4e 02 	call	0x49c	; 0x49c <GLCD_InitalizePorts>
for(i = 0; i < 3; i++)
 4b6:	c0 e0       	ldi	r28, 0x00	; 0
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <GLCD_Initalize+0x14>
  GLCD_WriteCommand((DISPLAY_ON_CMD | ON), i);
 4ba:	6c 2f       	mov	r22, r28
 4bc:	8f e3       	ldi	r24, 0x3F	; 63
 4be:	0e 94 ca 01 	call	0x394	; 0x394 <GLCD_WriteCommand>

void GLCD_Initalize(void)
{
unsigned char i;
GLCD_InitalizePorts();
for(i = 0; i < 3; i++)
 4c2:	cf 5f       	subi	r28, 0xFF	; 255
 4c4:	c3 30       	cpi	r28, 0x03	; 3
 4c6:	c8 f3       	brcs	.-14     	; 0x4ba <GLCD_Initalize+0xa>
  GLCD_WriteCommand((DISPLAY_ON_CMD | ON), i);
}
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <GLCD_GoTo>:
//-------------------------------------------------------------------------------------------------
// Go to  x and y whatever in GLCD
//-------------------------------------------------------------------------------------------------
void GLCD_GoTo(unsigned char x, unsigned char y)
{
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	d8 2f       	mov	r29, r24
 4d4:	16 2f       	mov	r17, r22
unsigned char i;
screen_x = x;
 4d6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <screen_x>
screen_y = y;
 4da:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__data_end>

for(i = 0; i < KS0108_SCREEN_WIDTH/64; i++)
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <GLCD_GoTo+0x32>
  {
  GLCD_WriteCommand(DISPLAY_SET_Y | 0,i);
 4e2:	6c 2f       	mov	r22, r28
 4e4:	80 e4       	ldi	r24, 0x40	; 64
 4e6:	0e 94 ca 01 	call	0x394	; 0x394 <GLCD_WriteCommand>
  GLCD_WriteCommand(DISPLAY_SET_X | y,i);
 4ea:	6c 2f       	mov	r22, r28
 4ec:	81 2f       	mov	r24, r17
 4ee:	88 6b       	ori	r24, 0xB8	; 184
 4f0:	0e 94 ca 01 	call	0x394	; 0x394 <GLCD_WriteCommand>
  GLCD_WriteCommand(DISPLAY_START_LINE | 0,i);
 4f4:	6c 2f       	mov	r22, r28
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	0e 94 ca 01 	call	0x394	; 0x394 <GLCD_WriteCommand>
{
unsigned char i;
screen_x = x;
screen_y = y;

for(i = 0; i < KS0108_SCREEN_WIDTH/64; i++)
 4fc:	cf 5f       	subi	r28, 0xFF	; 255
 4fe:	c2 30       	cpi	r28, 0x02	; 2
 500:	80 f3       	brcs	.-32     	; 0x4e2 <GLCD_GoTo+0x16>
  {
  GLCD_WriteCommand(DISPLAY_SET_Y | 0,i);
  GLCD_WriteCommand(DISPLAY_SET_X | y,i);
  GLCD_WriteCommand(DISPLAY_START_LINE | 0,i);
  }
GLCD_WriteCommand(DISPLAY_SET_Y | (x % 64), (x / 64));
 502:	cd 2f       	mov	r28, r29
 504:	c2 95       	swap	r28
 506:	c6 95       	lsr	r28
 508:	c6 95       	lsr	r28
 50a:	c3 70       	andi	r28, 0x03	; 3
 50c:	8d 2f       	mov	r24, r29
 50e:	8f 73       	andi	r24, 0x3F	; 63
 510:	6c 2f       	mov	r22, r28
 512:	80 64       	ori	r24, 0x40	; 64
 514:	0e 94 ca 01 	call	0x394	; 0x394 <GLCD_WriteCommand>
GLCD_WriteCommand(DISPLAY_SET_X | y, (x / 64));
 518:	6c 2f       	mov	r22, r28
 51a:	81 2f       	mov	r24, r17
 51c:	88 6b       	ori	r24, 0xB8	; 184
 51e:	0e 94 ca 01 	call	0x394	; 0x394 <GLCD_WriteCommand>
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	08 95       	ret

0000052a <GLCD_ClearScreen>:
//-------------------------------------------------------------------------------------------------
//ClearScreen function 
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
unsigned char i, j;
for(j = 0; j < KS0108_SCREEN_HEIGHT/8; j++)
 52e:	d0 e0       	ldi	r29, 0x00	; 0
 530:	0d c0       	rjmp	.+26     	; 0x54c <GLCD_ClearScreen+0x22>
  {
  GLCD_GoTo(0,j);
 532:	6d 2f       	mov	r22, r29
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
  for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
 53a:	c0 e0       	ldi	r28, 0x00	; 0
 53c:	04 c0       	rjmp	.+8      	; 0x546 <GLCD_ClearScreen+0x1c>
    GLCD_WriteData(0x00);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_WriteData>
{
unsigned char i, j;
for(j = 0; j < KS0108_SCREEN_HEIGHT/8; j++)
  {
  GLCD_GoTo(0,j);
  for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
 544:	cf 5f       	subi	r28, 0xFF	; 255
 546:	cc 23       	and	r28, r28
 548:	d4 f7       	brge	.-12     	; 0x53e <GLCD_ClearScreen+0x14>
//ClearScreen function 
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
unsigned char i, j;
for(j = 0; j < KS0108_SCREEN_HEIGHT/8; j++)
 54a:	df 5f       	subi	r29, 0xFF	; 255
 54c:	d8 30       	cpi	r29, 0x08	; 8
 54e:	88 f3       	brcs	.-30     	; 0x532 <GLCD_ClearScreen+0x8>
  {
  GLCD_GoTo(0,j);
  for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
    GLCD_WriteData(0x00);
  }
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <GLCD_WriteChar>:
//-------------------------------------------------------------------------------------------------
// 
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charToWrite)
{
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
int i;
charToWrite -= 32; 
 55c:	10 ee       	ldi	r17, 0xE0	; 224
 55e:	18 0f       	add	r17, r24
for(i = 0; i < 5; i++) 
 560:	c0 e0       	ldi	r28, 0x00	; 0
 562:	d0 e0       	ldi	r29, 0x00	; 0
 564:	12 c0       	rjmp	.+36     	; 0x58a <GLCD_WriteChar+0x34>
  GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)((int)font5x8 + (5 * charToWrite) + i))); 
 566:	81 2f       	mov	r24, r17
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	9c 01       	movw	r18, r24
 56c:	22 0f       	add	r18, r18
 56e:	33 1f       	adc	r19, r19
 570:	22 0f       	add	r18, r18
 572:	33 1f       	adc	r19, r19
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	8c 5a       	subi	r24, 0xAC	; 172
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	8c 0f       	add	r24, r28
 57e:	9d 1f       	adc	r25, r29
 580:	0e 94 55 02 	call	0x4aa	; 0x4aa <GLCD_ReadByteFromROMMemory>
 584:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_WriteData>
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charToWrite)
{
int i;
charToWrite -= 32; 
for(i = 0; i < 5; i++) 
 588:	21 96       	adiw	r28, 0x01	; 1
 58a:	c5 30       	cpi	r28, 0x05	; 5
 58c:	d1 05       	cpc	r29, r1
 58e:	5c f3       	brlt	.-42     	; 0x566 <GLCD_WriteChar+0x10>
  GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)((int)font5x8 + (5 * charToWrite) + i))); 
GLCD_WriteData(0x00);
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_WriteData>
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	08 95       	ret

0000059e <GLCD_WriteString>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * stringToWrite)
{
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ec 01       	movw	r28, r24
while(*stringToWrite)
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <GLCD_WriteString+0xe>
  GLCD_WriteChar(*stringToWrite++);
 5a6:	21 96       	adiw	r28, 0x01	; 1
 5a8:	0e 94 ab 02 	call	0x556	; 0x556 <GLCD_WriteChar>
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * stringToWrite)
{
while(*stringToWrite)
 5ac:	88 81       	ld	r24, Y
 5ae:	81 11       	cpse	r24, r1
 5b0:	fa cf       	rjmp	.-12     	; 0x5a6 <GLCD_WriteString+0x8>
  GLCD_WriteChar(*stringToWrite++);
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <GLCD_SetPixel>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_SetPixel(unsigned char x, unsigned char y)
{
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	d8 2f       	mov	r29, r24
 5c2:	c6 2f       	mov	r28, r22
unsigned char tmp;
GLCD_GoTo(x, (y / 8));
 5c4:	16 2f       	mov	r17, r22
 5c6:	16 95       	lsr	r17
 5c8:	16 95       	lsr	r17
 5ca:	16 95       	lsr	r17
 5cc:	61 2f       	mov	r22, r17
 5ce:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
tmp = GLCD_ReadData();
 5d2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <GLCD_ReadData>
GLCD_GoTo(x, (y / 8));
 5d6:	61 2f       	mov	r22, r17
 5d8:	8d 2f       	mov	r24, r29
 5da:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
tmp = GLCD_ReadData();
 5de:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <GLCD_ReadData>
 5e2:	08 2f       	mov	r16, r24
GLCD_GoTo(x, (y / 8));
 5e4:	61 2f       	mov	r22, r17
 5e6:	8d 2f       	mov	r24, r29
 5e8:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
tmp |= (1 << (y % 8));
 5ec:	c7 70       	andi	r28, 0x07	; 7
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <GLCD_SetPixel+0x40>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	ca 95       	dec	r28
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <GLCD_SetPixel+0x3c>
GLCD_WriteData(tmp);
 5fc:	80 2b       	or	r24, r16
 5fe:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_WriteData>
}
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	08 95       	ret

0000060c <GLCD_into_string>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------

void GLCD_into_string(int data)
{
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
 614:	60 97       	sbiw	r28, 0x10	; 16
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	de bf       	out	0x3e, r29	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	cd bf       	out	0x3d, r28	; 61
	char buff[16];            //string to hold ascii result
	itoa(data,buff,10);       //10 for decimal
 620:	4a e0       	ldi	r20, 0x0A	; 10
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	be 01       	movw	r22, r28
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	0e 94 84 06 	call	0xd08	; 0xd08 <itoa>
	GLCD_WriteString(buff); // display output
 62e:	ce 01       	movw	r24, r28
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	0e 94 cf 02 	call	0x59e	; 0x59e <GLCD_WriteString>
}
 636:	60 96       	adiw	r28, 0x10	; 16
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <APP_edgeProcessing>:
 
 

void APP_edgeProcessing(void)
{
	g_edgeCount++;
 648:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_edgeCount>
 64c:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <g_edgeCount+0x1>
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <g_edgeCount+0x1>
 656:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <g_edgeCount>
	if(g_edgeCount == 1)
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	91 05       	cpc	r25, r1
 65e:	31 f4       	brne	.+12     	; 0x66c <APP_edgeProcessing+0x24>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
 660:	0e 94 84 01 	call	0x308	; 0x308 <Icu_clearTimerValue>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Icu_setEdgeDetectionType>
 66a:	08 95       	ret
	}
	else if(g_edgeCount == 2)
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	91 05       	cpc	r25, r1
 670:	51 f4       	brne	.+20     	; 0x686 <APP_edgeProcessing+0x3e>
	{
		/* Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
 672:	0e 94 81 01 	call	0x302	; 0x302 <Icu_getInputCaptureValue>
 676:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <g_timeHigh+0x1>
 67a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <g_timeHigh>
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Icu_setEdgeDetectionType>
 684:	08 95       	ret
	}
	else if(g_edgeCount == 3)
 686:	83 30       	cpi	r24, 0x03	; 3
 688:	91 05       	cpc	r25, r1
 68a:	51 f4       	brne	.+20     	; 0x6a0 <APP_edgeProcessing+0x58>
	{
		/* Store the Period time value */
		g_timePeriod = Icu_getInputCaptureValue();
 68c:	0e 94 81 01 	call	0x302	; 0x302 <Icu_getInputCaptureValue>
 690:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <g_timePeriod+0x1>
 694:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <g_timePeriod>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Icu_setEdgeDetectionType>
 69e:	08 95       	ret
	}
	else if(g_edgeCount == 4)
 6a0:	04 97       	sbiw	r24, 0x04	; 4
 6a2:	71 f4       	brne	.+28     	; 0x6c0 <APP_edgeProcessing+0x78>
	{
		/* Store the Period time value + High time value */
		g_timePeriodPlusHigh = Icu_getInputCaptureValue();
 6a4:	0e 94 81 01 	call	0x302	; 0x302 <Icu_getInputCaptureValue>
 6a8:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <g_timePeriodPlusHigh+0x1>
 6ac:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <g_timePeriodPlusHigh>
		/* Clear the timer counter register to start measurements again */
		Icu_clearTimerValue();
 6b0:	0e 94 84 01 	call	0x308	; 0x308 <Icu_clearTimerValue>
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Icu_setEdgeDetectionType>
		SREG &= ~(1<<7); /* disable interrupts */
 6ba:	8f b7       	in	r24, 0x3f	; 63
 6bc:	8f 77       	andi	r24, 0x7F	; 127
 6be:	8f bf       	out	0x3f, r24	; 63
 6c0:	08 95       	ret

000006c2 <Clear_pulse>:
		}
	}
	
}
void Clear_pulse(void)
{
 6c2:	cf 93       	push	r28
	unsigned char x=0;
	for (x=3;x<7;x++)
 6c4:	c3 e0       	ldi	r28, 0x03	; 3
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <Clear_pulse+0x18>
	{
		GLCD_GoTo(0,x);
 6c8:	6c 2f       	mov	r22, r28
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
		GLCD_WriteString("                       ");
 6d0:	80 e6       	ldi	r24, 0x60	; 96
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 cf 02 	call	0x59e	; 0x59e <GLCD_WriteString>
	
}
void Clear_pulse(void)
{
	unsigned char x=0;
	for (x=3;x<7;x++)
 6d8:	cf 5f       	subi	r28, 0xFF	; 255
 6da:	c7 30       	cpi	r28, 0x07	; 7
 6dc:	a8 f3       	brcs	.-22     	; 0x6c8 <Clear_pulse+0x6>
	{
		GLCD_GoTo(0,x);
		GLCD_WriteString("                       ");
	}
	
}
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <pulse_drawer>:

	}
}

void pulse_drawer(unsigned char duty)
{
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	f8 2e       	mov	r15, r24
	old_duty=duty;
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <old_duty+0x1>
 6f4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <old_duty>
	Clear_pulse();
 6f8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Clear_pulse>
	unsigned char x=0;
	unsigned char y=0;
	if (duty>0 && duty< 100 )
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	8f 0d       	add	r24, r15
 700:	83 36       	cpi	r24, 0x63	; 99
 702:	b0 f5       	brcc	.+108    	; 0x770 <pulse_drawer+0x8e>
	{
		
		y=50;
		unsigned char high_pulse=(float)duty/(float)3.125;
 704:	6f 2d       	mov	r22, r15
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	48 e4       	ldi	r20, 0x48	; 72
 716:	50 e4       	ldi	r21, 0x40	; 64
 718:	0e 94 c6 04 	call	0x98c	; 0x98c <__divsf3>
 71c:	0e 94 38 05 	call	0xa70	; 0xa70 <__fixunssfsi>
 720:	06 2f       	mov	r16, r22
		unsigned char peruid =32;
 722:	10 e2       	ldi	r17, 0x20	; 32
	unsigned char x=0;
	unsigned char y=0;
	if (duty>0 && duty< 100 )
	{
		
		y=50;
 724:	d2 e3       	ldi	r29, 0x32	; 50

void pulse_drawer(unsigned char duty)
{
	old_duty=duty;
	Clear_pulse();
	unsigned char x=0;
 726:	c0 e0       	ldi	r28, 0x00	; 0
		
		y=50;
		unsigned char high_pulse=(float)duty/(float)3.125;
		unsigned char peruid =32;
		
		while(x<128)
 728:	21 c0       	rjmp	.+66     	; 0x76c <pulse_drawer+0x8a>
		{
			
			for(y=y;y>30;y--)
			{
				GLCD_SetPixel(x,y);
 72a:	6d 2f       	mov	r22, r29
 72c:	8c 2f       	mov	r24, r28
 72e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GLCD_SetPixel>
		unsigned char peruid =32;
		
		while(x<128)
		{
			
			for(y=y;y>30;y--)
 732:	d1 50       	subi	r29, 0x01	; 1
 734:	df 31       	cpi	r29, 0x1F	; 31
 736:	c8 f7       	brcc	.-14     	; 0x72a <pulse_drawer+0x48>
 738:	05 c0       	rjmp	.+10     	; 0x744 <pulse_drawer+0x62>
				GLCD_SetPixel(x,y);
			}
			
			for(x=x;x<high_pulse;x++)
			{
				GLCD_SetPixel(x,y);
 73a:	6d 2f       	mov	r22, r29
 73c:	8c 2f       	mov	r24, r28
 73e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GLCD_SetPixel>
			for(y=y;y>30;y--)
			{
				GLCD_SetPixel(x,y);
			}
			
			for(x=x;x<high_pulse;x++)
 742:	cf 5f       	subi	r28, 0xFF	; 255
 744:	c0 17       	cp	r28, r16
 746:	c8 f3       	brcs	.-14     	; 0x73a <pulse_drawer+0x58>
			{
				GLCD_SetPixel(x,y);
			}
			high_pulse+=32;
 748:	00 5e       	subi	r16, 0xE0	; 224
			for(y=y;y<50;y++)
 74a:	05 c0       	rjmp	.+10     	; 0x756 <pulse_drawer+0x74>
			{
				GLCD_SetPixel(x,y);
 74c:	6d 2f       	mov	r22, r29
 74e:	8c 2f       	mov	r24, r28
 750:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GLCD_SetPixel>
			for(x=x;x<high_pulse;x++)
			{
				GLCD_SetPixel(x,y);
			}
			high_pulse+=32;
			for(y=y;y<50;y++)
 754:	df 5f       	subi	r29, 0xFF	; 255
 756:	d2 33       	cpi	r29, 0x32	; 50
 758:	c8 f3       	brcs	.-14     	; 0x74c <pulse_drawer+0x6a>
 75a:	05 c0       	rjmp	.+10     	; 0x766 <pulse_drawer+0x84>
			{
				GLCD_SetPixel(x,y);
			}
			for(x=x;x<peruid;x++)
			{
				GLCD_SetPixel(x,y);
 75c:	6d 2f       	mov	r22, r29
 75e:	8c 2f       	mov	r24, r28
 760:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GLCD_SetPixel>
			high_pulse+=32;
			for(y=y;y<50;y++)
			{
				GLCD_SetPixel(x,y);
			}
			for(x=x;x<peruid;x++)
 764:	cf 5f       	subi	r28, 0xFF	; 255
 766:	c1 17       	cp	r28, r17
 768:	c8 f3       	brcs	.-14     	; 0x75c <pulse_drawer+0x7a>
			{
				GLCD_SetPixel(x,y);
			}
			peruid+=32;
 76a:	10 5e       	subi	r17, 0xE0	; 224
		
		y=50;
		unsigned char high_pulse=(float)duty/(float)3.125;
		unsigned char peruid =32;
		
		while(x<128)
 76c:	cc 23       	and	r28, r28
 76e:	14 f7       	brge	.-60     	; 0x734 <pulse_drawer+0x52>
			peruid+=32;
		}
		x=0;
	}
	
	if (duty == 100)
 770:	84 e6       	ldi	r24, 0x64	; 100
 772:	f8 12       	cpse	r15, r24
 774:	0a c0       	rjmp	.+20     	; 0x78a <pulse_drawer+0xa8>
 776:	06 c0       	rjmp	.+12     	; 0x784 <pulse_drawer+0xa2>
	{
		x=0;
		y=30;
		for(;x<128;x++)
		{
			GLCD_SetPixel(x,y);
 778:	6e e1       	ldi	r22, 0x1E	; 30
 77a:	8c 2f       	mov	r24, r28
 77c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GLCD_SetPixel>
	
	if (duty == 100)
	{
		x=0;
		y=30;
		for(;x<128;x++)
 780:	cf 5f       	subi	r28, 0xFF	; 255
 782:	01 c0       	rjmp	.+2      	; 0x786 <pulse_drawer+0xa4>
 784:	c0 e0       	ldi	r28, 0x00	; 0
 786:	cc 23       	and	r28, r28
 788:	bc f7       	brge	.-18     	; 0x778 <pulse_drawer+0x96>
		{
			GLCD_SetPixel(x,y);
		}
	}
	if (duty == 0)
 78a:	ff 20       	and	r15, r15
 78c:	39 f0       	breq	.+14     	; 0x79c <pulse_drawer+0xba>
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <pulse_drawer+0xc0>
	{
		x=0;
		y=50;
		for(;x<128;x++)
		{
			GLCD_SetPixel(x,y);
 790:	62 e3       	ldi	r22, 0x32	; 50
 792:	8c 2f       	mov	r24, r28
 794:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GLCD_SetPixel>
	}
	if (duty == 0)
	{
		x=0;
		y=50;
		for(;x<128;x++)
 798:	cf 5f       	subi	r28, 0xFF	; 255
 79a:	01 c0       	rjmp	.+2      	; 0x79e <pulse_drawer+0xbc>
 79c:	c0 e0       	ldi	r28, 0x00	; 0
 79e:	cc 23       	and	r28, r28
 7a0:	bc f7       	brge	.-18     	; 0x790 <pulse_drawer+0xae>
		{
			GLCD_SetPixel(x,y);
		}
	}
	
}
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	ff 90       	pop	r15
 7ac:	08 95       	ret

000007ae <main>:
uint16 g_edgeCount = 0;
uint16 g_timeHigh = 0;//T1
uint16 g_timePeriod = 0;//T2
uint16 g_timePeriodPlusHigh = 0;//T3
 int main(void)
 {
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	00 d0       	rcall	.+0      	; 0x7b4 <main+0x6>
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
			 uint32 dutyCycle = 0;
			/* Create configuration structure for ICU driver */
			Icu_ConfigType Icu_Config = {F_CPU_CLOCK,RISING};
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	89 83       	std	Y+1, r24	; 0x01
 7bc:	8a 83       	std	Y+2, r24	; 0x02

			/* Enable Global Interrupt I-Bit */
			SREG |= (1<<7);
 7be:	8f b7       	in	r24, 0x3f	; 63
 7c0:	80 68       	ori	r24, 0x80	; 128
 7c2:	8f bf       	out	0x3f, r24	; 63

			/* Initialize both the LCD and ICU driver */
			GLCD_Initalize();
 7c4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <GLCD_Initalize>
			GLCD_ClearScreen();
 7c8:	0e 94 95 02 	call	0x52a	; 0x52a <GLCD_ClearScreen>
			Icu_init(&Icu_Config);
 7cc:	ce 01       	movw	r24, r28
 7ce:	01 96       	adiw	r24, 0x01	; 1
 7d0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Icu_init>
			GLCD_GoTo(0,0);
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
			GLCD_WriteString("Duty=");
 7dc:	88 e7       	ldi	r24, 0x78	; 120
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 cf 02 	call	0x59e	; 0x59e <GLCD_WriteString>
			GLCD_GoTo(55,0);
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	87 e3       	ldi	r24, 0x37	; 55
 7e8:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
			GLCD_WriteString("Freq=");
 7ec:	8e e7       	ldi	r24, 0x7E	; 126
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 cf 02 	call	0x59e	; 0x59e <GLCD_WriteString>
			while(1)
			{
				if(g_edgeCount >= 4)
 7f4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_edgeCount>
 7f8:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <g_edgeCount+0x1>
 7fc:	04 97       	sbiw	r24, 0x04	; 4
 7fe:	d0 f3       	brcs	.-12     	; 0x7f4 <main+0x46>
				{
					g_edgeCount = 0;
 800:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <g_edgeCount+0x1>
 804:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <g_edgeCount>
					/* calculate the dutyCycle */
					dutyCycle = ((float)(g_timePeriodPlusHigh-g_timePeriod) / (g_timePeriodPlusHigh - g_timeHigh)) * 100;
 808:	c0 90 8c 00 	lds	r12, 0x008C	; 0x80008c <g_timePeriodPlusHigh>
 80c:	d0 90 8d 00 	lds	r13, 0x008D	; 0x80008d <g_timePeriodPlusHigh+0x1>
 810:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <g_timePeriod>
 814:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <g_timePeriod+0x1>
 818:	b6 01       	movw	r22, r12
 81a:	68 1b       	sub	r22, r24
 81c:	79 0b       	sbc	r23, r25
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
 826:	4b 01       	movw	r8, r22
 828:	5c 01       	movw	r10, r24
 82a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <g_timeHigh>
 82e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <g_timeHigh+0x1>
 832:	b6 01       	movw	r22, r12
 834:	68 1b       	sub	r22, r24
 836:	79 0b       	sbc	r23, r25
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
 840:	9b 01       	movw	r18, r22
 842:	ac 01       	movw	r20, r24
 844:	c5 01       	movw	r24, r10
 846:	b4 01       	movw	r22, r8
 848:	0e 94 c6 04 	call	0x98c	; 0x98c <__divsf3>
 84c:	20 e0       	ldi	r18, 0x00	; 0
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	48 ec       	ldi	r20, 0xC8	; 200
 852:	52 e4       	ldi	r21, 0x42	; 66
 854:	0e 94 f5 05 	call	0xbea	; 0xbea <__mulsf3>
 858:	0e 94 38 05 	call	0xa70	; 0xa70 <__fixunssfsi>
 85c:	b6 2e       	mov	r11, r22
 85e:	a7 2e       	mov	r10, r23
 860:	86 2f       	mov	r24, r22
 862:	9a 2d       	mov	r25, r10
 864:	6c 01       	movw	r12, r24
					//			dutyCycle = ((float)g_timeHigh/g_timePeriod) * 100;
					/* display the dutyCycle on LCD screen */
					GLCD_GoTo(30,0);
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	8e e1       	ldi	r24, 0x1E	; 30
 86a:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
					GLCD_into_string(dutyCycle);
 86e:	8b 2d       	mov	r24, r11
 870:	9a 2d       	mov	r25, r10
 872:	0e 94 06 03 	call	0x60c	; 0x60c <GLCD_into_string>
					GLCD_WriteString("% ");
 876:	84 e8       	ldi	r24, 0x84	; 132
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 cf 02 	call	0x59e	; 0x59e <GLCD_WriteString>
					GLCD_GoTo(75,0);
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	8b e4       	ldi	r24, 0x4B	; 75
 882:	0e 94 66 02 	call	0x4cc	; 0x4cc <GLCD_GoTo>
					switch (Icu_Config.clock)
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	83 30       	cpi	r24, 0x03	; 3
 88a:	99 f1       	breq	.+102    	; 0x8f2 <__stack+0x93>
 88c:	28 f4       	brcc	.+10     	; 0x898 <__stack+0x39>
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	51 f0       	breq	.+20     	; 0x8a6 <__stack+0x47>
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	c1 f0       	breq	.+48     	; 0x8c6 <__stack+0x67>
 896:	68 c0       	rjmp	.+208    	; 0x968 <__stack+0x109>
 898:	84 30       	cpi	r24, 0x04	; 4
 89a:	09 f4       	brne	.+2      	; 0x89e <__stack+0x3f>
 89c:	43 c0       	rjmp	.+134    	; 0x924 <__stack+0xc5>
 89e:	85 30       	cpi	r24, 0x05	; 5
 8a0:	09 f4       	brne	.+2      	; 0x8a4 <__stack+0x45>
 8a2:	50 c0       	rjmp	.+160    	; 0x944 <__stack+0xe5>
 8a4:	61 c0       	rjmp	.+194    	; 0x968 <__stack+0x109>
					{
					case 0:
					break;
					case 1:
					GLCD_into_string(F_CPU/(g_timePeriod));
 8a6:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <g_timePeriod>
 8aa:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <g_timePeriod+0x1>
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	60 e4       	ldi	r22, 0x40	; 64
 8b4:	72 e4       	ldi	r23, 0x42	; 66
 8b6:	8f e0       	ldi	r24, 0x0F	; 15
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodsi4>
 8be:	c9 01       	movw	r24, r18
 8c0:	0e 94 06 03 	call	0x60c	; 0x60c <GLCD_into_string>
					break;
 8c4:	51 c0       	rjmp	.+162    	; 0x968 <__stack+0x109>
					case 2:
					GLCD_into_string(F_CPU/(g_timePeriod*8));
 8c6:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <g_timePeriod>
 8ca:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <g_timePeriod+0x1>
 8ce:	22 0f       	add	r18, r18
 8d0:	33 1f       	adc	r19, r19
 8d2:	22 0f       	add	r18, r18
 8d4:	33 1f       	adc	r19, r19
 8d6:	22 0f       	add	r18, r18
 8d8:	33 1f       	adc	r19, r19
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	60 e4       	ldi	r22, 0x40	; 64
 8e0:	72 e4       	ldi	r23, 0x42	; 66
 8e2:	8f e0       	ldi	r24, 0x0F	; 15
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodsi4>
 8ea:	c9 01       	movw	r24, r18
 8ec:	0e 94 06 03 	call	0x60c	; 0x60c <GLCD_into_string>
					break;
 8f0:	3b c0       	rjmp	.+118    	; 0x968 <__stack+0x109>
					case 3:
					GLCD_into_string(F_CPU/(g_timePeriod*64));
 8f2:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <g_timePeriod>
 8f6:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <g_timePeriod+0x1>
 8fa:	00 24       	eor	r0, r0
 8fc:	36 95       	lsr	r19
 8fe:	27 95       	ror	r18
 900:	07 94       	ror	r0
 902:	36 95       	lsr	r19
 904:	27 95       	ror	r18
 906:	07 94       	ror	r0
 908:	32 2f       	mov	r19, r18
 90a:	20 2d       	mov	r18, r0
 90c:	40 e0       	ldi	r20, 0x00	; 0
 90e:	50 e0       	ldi	r21, 0x00	; 0
 910:	60 e4       	ldi	r22, 0x40	; 64
 912:	72 e4       	ldi	r23, 0x42	; 66
 914:	8f e0       	ldi	r24, 0x0F	; 15
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodsi4>
 91c:	c9 01       	movw	r24, r18
 91e:	0e 94 06 03 	call	0x60c	; 0x60c <GLCD_into_string>
					break;
 922:	22 c0       	rjmp	.+68     	; 0x968 <__stack+0x109>
					case 4:
					GLCD_into_string(F_CPU/(g_timePeriod*256));
 924:	f0 90 8e 00 	lds	r15, 0x008E	; 0x80008e <g_timePeriod>
 928:	e1 2c       	mov	r14, r1
 92a:	97 01       	movw	r18, r14
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	60 e4       	ldi	r22, 0x40	; 64
 932:	72 e4       	ldi	r23, 0x42	; 66
 934:	8f e0       	ldi	r24, 0x0F	; 15
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodsi4>
 93c:	c9 01       	movw	r24, r18
 93e:	0e 94 06 03 	call	0x60c	; 0x60c <GLCD_into_string>
					break;
 942:	12 c0       	rjmp	.+36     	; 0x968 <__stack+0x109>
					case 5:
					GLCD_into_string(F_CPU/(g_timePeriod*1024));
 944:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <g_timePeriod>
 948:	18 2f       	mov	r17, r24
 94a:	11 0f       	add	r17, r17
 94c:	11 0f       	add	r17, r17
 94e:	00 e0       	ldi	r16, 0x00	; 0
 950:	98 01       	movw	r18, r16
 952:	40 e0       	ldi	r20, 0x00	; 0
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	60 e4       	ldi	r22, 0x40	; 64
 958:	72 e4       	ldi	r23, 0x42	; 66
 95a:	8f e0       	ldi	r24, 0x0F	; 15
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodsi4>
 962:	c9 01       	movw	r24, r18
 964:	0e 94 06 03 	call	0x60c	; 0x60c <GLCD_into_string>
					break;
					
					}
					GLCD_WriteString("Hz");
 968:	87 e8       	ldi	r24, 0x87	; 135
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 cf 02 	call	0x59e	; 0x59e <GLCD_WriteString>
					if (dutyCycle != old_duty)
 970:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <old_duty>
 974:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <old_duty+0x1>
 978:	c8 16       	cp	r12, r24
 97a:	d9 06       	cpc	r13, r25
 97c:	19 f0       	breq	.+6      	; 0x984 <__stack+0x125>
						{
							pulse_drawer(dutyCycle);
 97e:	8b 2d       	mov	r24, r11
 980:	0e 94 71 03 	call	0x6e2	; 0x6e2 <pulse_drawer>
						}
					//_delay_ms(1000);
					SREG |= (1<<7);
 984:	8f b7       	in	r24, 0x3f	; 63
 986:	80 68       	ori	r24, 0x80	; 128
 988:	8f bf       	out	0x3f, r24	; 63
 98a:	34 cf       	rjmp	.-408    	; 0x7f4 <main+0x46>

0000098c <__divsf3>:
 98c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__divsf3x>
 990:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
 994:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
 998:	58 f0       	brcs	.+22     	; 0x9b0 <__divsf3+0x24>
 99a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
 99e:	40 f0       	brcs	.+16     	; 0x9b0 <__divsf3+0x24>
 9a0:	29 f4       	brne	.+10     	; 0x9ac <__divsf3+0x20>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	29 f0       	breq	.+10     	; 0x9b0 <__divsf3+0x24>
 9a6:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 9aa:	51 11       	cpse	r21, r1
 9ac:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
 9b0:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>

000009b4 <__divsf3x>:
 9b4:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
 9b8:	68 f3       	brcs	.-38     	; 0x994 <__divsf3+0x8>

000009ba <__divsf3_pse>:
 9ba:	99 23       	and	r25, r25
 9bc:	b1 f3       	breq	.-20     	; 0x9aa <__divsf3+0x1e>
 9be:	55 23       	and	r21, r21
 9c0:	91 f3       	breq	.-28     	; 0x9a6 <__divsf3+0x1a>
 9c2:	95 1b       	sub	r25, r21
 9c4:	55 0b       	sbc	r21, r21
 9c6:	bb 27       	eor	r27, r27
 9c8:	aa 27       	eor	r26, r26
 9ca:	62 17       	cp	r22, r18
 9cc:	73 07       	cpc	r23, r19
 9ce:	84 07       	cpc	r24, r20
 9d0:	38 f0       	brcs	.+14     	; 0x9e0 <__divsf3_pse+0x26>
 9d2:	9f 5f       	subi	r25, 0xFF	; 255
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
 9d6:	22 0f       	add	r18, r18
 9d8:	33 1f       	adc	r19, r19
 9da:	44 1f       	adc	r20, r20
 9dc:	aa 1f       	adc	r26, r26
 9de:	a9 f3       	breq	.-22     	; 0x9ca <__divsf3_pse+0x10>
 9e0:	35 d0       	rcall	.+106    	; 0xa4c <__divsf3_pse+0x92>
 9e2:	0e 2e       	mov	r0, r30
 9e4:	3a f0       	brmi	.+14     	; 0x9f4 <__divsf3_pse+0x3a>
 9e6:	e0 e8       	ldi	r30, 0x80	; 128
 9e8:	32 d0       	rcall	.+100    	; 0xa4e <__divsf3_pse+0x94>
 9ea:	91 50       	subi	r25, 0x01	; 1
 9ec:	50 40       	sbci	r21, 0x00	; 0
 9ee:	e6 95       	lsr	r30
 9f0:	00 1c       	adc	r0, r0
 9f2:	ca f7       	brpl	.-14     	; 0x9e6 <__divsf3_pse+0x2c>
 9f4:	2b d0       	rcall	.+86     	; 0xa4c <__divsf3_pse+0x92>
 9f6:	fe 2f       	mov	r31, r30
 9f8:	29 d0       	rcall	.+82     	; 0xa4c <__divsf3_pse+0x92>
 9fa:	66 0f       	add	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	bb 1f       	adc	r27, r27
 a02:	26 17       	cp	r18, r22
 a04:	37 07       	cpc	r19, r23
 a06:	48 07       	cpc	r20, r24
 a08:	ab 07       	cpc	r26, r27
 a0a:	b0 e8       	ldi	r27, 0x80	; 128
 a0c:	09 f0       	breq	.+2      	; 0xa10 <__divsf3_pse+0x56>
 a0e:	bb 0b       	sbc	r27, r27
 a10:	80 2d       	mov	r24, r0
 a12:	bf 01       	movw	r22, r30
 a14:	ff 27       	eor	r31, r31
 a16:	93 58       	subi	r25, 0x83	; 131
 a18:	5f 4f       	sbci	r21, 0xFF	; 255
 a1a:	3a f0       	brmi	.+14     	; 0xa2a <__divsf3_pse+0x70>
 a1c:	9e 3f       	cpi	r25, 0xFE	; 254
 a1e:	51 05       	cpc	r21, r1
 a20:	78 f0       	brcs	.+30     	; 0xa40 <__divsf3_pse+0x86>
 a22:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 a26:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
 a2a:	5f 3f       	cpi	r21, 0xFF	; 255
 a2c:	e4 f3       	brlt	.-8      	; 0xa26 <__divsf3_pse+0x6c>
 a2e:	98 3e       	cpi	r25, 0xE8	; 232
 a30:	d4 f3       	brlt	.-12     	; 0xa26 <__divsf3_pse+0x6c>
 a32:	86 95       	lsr	r24
 a34:	77 95       	ror	r23
 a36:	67 95       	ror	r22
 a38:	b7 95       	ror	r27
 a3a:	f7 95       	ror	r31
 a3c:	9f 5f       	subi	r25, 0xFF	; 255
 a3e:	c9 f7       	brne	.-14     	; 0xa32 <__divsf3_pse+0x78>
 a40:	88 0f       	add	r24, r24
 a42:	91 1d       	adc	r25, r1
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret
 a4c:	e1 e0       	ldi	r30, 0x01	; 1
 a4e:	66 0f       	add	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	bb 1f       	adc	r27, r27
 a56:	62 17       	cp	r22, r18
 a58:	73 07       	cpc	r23, r19
 a5a:	84 07       	cpc	r24, r20
 a5c:	ba 07       	cpc	r27, r26
 a5e:	20 f0       	brcs	.+8      	; 0xa68 <__divsf3_pse+0xae>
 a60:	62 1b       	sub	r22, r18
 a62:	73 0b       	sbc	r23, r19
 a64:	84 0b       	sbc	r24, r20
 a66:	ba 0b       	sbc	r27, r26
 a68:	ee 1f       	adc	r30, r30
 a6a:	88 f7       	brcc	.-30     	; 0xa4e <__divsf3_pse+0x94>
 a6c:	e0 95       	com	r30
 a6e:	08 95       	ret

00000a70 <__fixunssfsi>:
 a70:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_splitA>
 a74:	88 f0       	brcs	.+34     	; 0xa98 <__fixunssfsi+0x28>
 a76:	9f 57       	subi	r25, 0x7F	; 127
 a78:	98 f0       	brcs	.+38     	; 0xaa0 <__fixunssfsi+0x30>
 a7a:	b9 2f       	mov	r27, r25
 a7c:	99 27       	eor	r25, r25
 a7e:	b7 51       	subi	r27, 0x17	; 23
 a80:	b0 f0       	brcs	.+44     	; 0xaae <__fixunssfsi+0x3e>
 a82:	e1 f0       	breq	.+56     	; 0xabc <__fixunssfsi+0x4c>
 a84:	66 0f       	add	r22, r22
 a86:	77 1f       	adc	r23, r23
 a88:	88 1f       	adc	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	1a f0       	brmi	.+6      	; 0xa94 <__fixunssfsi+0x24>
 a8e:	ba 95       	dec	r27
 a90:	c9 f7       	brne	.-14     	; 0xa84 <__fixunssfsi+0x14>
 a92:	14 c0       	rjmp	.+40     	; 0xabc <__fixunssfsi+0x4c>
 a94:	b1 30       	cpi	r27, 0x01	; 1
 a96:	91 f0       	breq	.+36     	; 0xabc <__fixunssfsi+0x4c>
 a98:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_zero>
 a9c:	b1 e0       	ldi	r27, 0x01	; 1
 a9e:	08 95       	ret
 aa0:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_zero>
 aa4:	67 2f       	mov	r22, r23
 aa6:	78 2f       	mov	r23, r24
 aa8:	88 27       	eor	r24, r24
 aaa:	b8 5f       	subi	r27, 0xF8	; 248
 aac:	39 f0       	breq	.+14     	; 0xabc <__fixunssfsi+0x4c>
 aae:	b9 3f       	cpi	r27, 0xF9	; 249
 ab0:	cc f3       	brlt	.-14     	; 0xaa4 <__fixunssfsi+0x34>
 ab2:	86 95       	lsr	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b3 95       	inc	r27
 aba:	d9 f7       	brne	.-10     	; 0xab2 <__fixunssfsi+0x42>
 abc:	3e f4       	brtc	.+14     	; 0xacc <__fixunssfsi+0x5c>
 abe:	90 95       	com	r25
 ac0:	80 95       	com	r24
 ac2:	70 95       	com	r23
 ac4:	61 95       	neg	r22
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	08 95       	ret

00000ace <__floatunsisf>:
 ace:	e8 94       	clt
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <__floatsisf+0x12>

00000ad2 <__floatsisf>:
 ad2:	97 fb       	bst	r25, 7
 ad4:	3e f4       	brtc	.+14     	; 0xae4 <__floatsisf+0x12>
 ad6:	90 95       	com	r25
 ad8:	80 95       	com	r24
 ada:	70 95       	com	r23
 adc:	61 95       	neg	r22
 ade:	7f 4f       	sbci	r23, 0xFF	; 255
 ae0:	8f 4f       	sbci	r24, 0xFF	; 255
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	99 23       	and	r25, r25
 ae6:	a9 f0       	breq	.+42     	; 0xb12 <__floatsisf+0x40>
 ae8:	f9 2f       	mov	r31, r25
 aea:	96 e9       	ldi	r25, 0x96	; 150
 aec:	bb 27       	eor	r27, r27
 aee:	93 95       	inc	r25
 af0:	f6 95       	lsr	r31
 af2:	87 95       	ror	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b7 95       	ror	r27
 afa:	f1 11       	cpse	r31, r1
 afc:	f8 cf       	rjmp	.-16     	; 0xaee <__floatsisf+0x1c>
 afe:	fa f4       	brpl	.+62     	; 0xb3e <__floatsisf+0x6c>
 b00:	bb 0f       	add	r27, r27
 b02:	11 f4       	brne	.+4      	; 0xb08 <__floatsisf+0x36>
 b04:	60 ff       	sbrs	r22, 0
 b06:	1b c0       	rjmp	.+54     	; 0xb3e <__floatsisf+0x6c>
 b08:	6f 5f       	subi	r22, 0xFF	; 255
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	8f 4f       	sbci	r24, 0xFF	; 255
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	16 c0       	rjmp	.+44     	; 0xb3e <__floatsisf+0x6c>
 b12:	88 23       	and	r24, r24
 b14:	11 f0       	breq	.+4      	; 0xb1a <__floatsisf+0x48>
 b16:	96 e9       	ldi	r25, 0x96	; 150
 b18:	11 c0       	rjmp	.+34     	; 0xb3c <__floatsisf+0x6a>
 b1a:	77 23       	and	r23, r23
 b1c:	21 f0       	breq	.+8      	; 0xb26 <__floatsisf+0x54>
 b1e:	9e e8       	ldi	r25, 0x8E	; 142
 b20:	87 2f       	mov	r24, r23
 b22:	76 2f       	mov	r23, r22
 b24:	05 c0       	rjmp	.+10     	; 0xb30 <__floatsisf+0x5e>
 b26:	66 23       	and	r22, r22
 b28:	71 f0       	breq	.+28     	; 0xb46 <__floatsisf+0x74>
 b2a:	96 e8       	ldi	r25, 0x86	; 134
 b2c:	86 2f       	mov	r24, r22
 b2e:	70 e0       	ldi	r23, 0x00	; 0
 b30:	60 e0       	ldi	r22, 0x00	; 0
 b32:	2a f0       	brmi	.+10     	; 0xb3e <__floatsisf+0x6c>
 b34:	9a 95       	dec	r25
 b36:	66 0f       	add	r22, r22
 b38:	77 1f       	adc	r23, r23
 b3a:	88 1f       	adc	r24, r24
 b3c:	da f7       	brpl	.-10     	; 0xb34 <__floatsisf+0x62>
 b3e:	88 0f       	add	r24, r24
 b40:	96 95       	lsr	r25
 b42:	87 95       	ror	r24
 b44:	97 f9       	bld	r25, 7
 b46:	08 95       	ret

00000b48 <__fp_inf>:
 b48:	97 f9       	bld	r25, 7
 b4a:	9f 67       	ori	r25, 0x7F	; 127
 b4c:	80 e8       	ldi	r24, 0x80	; 128
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	60 e0       	ldi	r22, 0x00	; 0
 b52:	08 95       	ret

00000b54 <__fp_nan>:
 b54:	9f ef       	ldi	r25, 0xFF	; 255
 b56:	80 ec       	ldi	r24, 0xC0	; 192
 b58:	08 95       	ret

00000b5a <__fp_pscA>:
 b5a:	00 24       	eor	r0, r0
 b5c:	0a 94       	dec	r0
 b5e:	16 16       	cp	r1, r22
 b60:	17 06       	cpc	r1, r23
 b62:	18 06       	cpc	r1, r24
 b64:	09 06       	cpc	r0, r25
 b66:	08 95       	ret

00000b68 <__fp_pscB>:
 b68:	00 24       	eor	r0, r0
 b6a:	0a 94       	dec	r0
 b6c:	12 16       	cp	r1, r18
 b6e:	13 06       	cpc	r1, r19
 b70:	14 06       	cpc	r1, r20
 b72:	05 06       	cpc	r0, r21
 b74:	08 95       	ret

00000b76 <__fp_round>:
 b76:	09 2e       	mov	r0, r25
 b78:	03 94       	inc	r0
 b7a:	00 0c       	add	r0, r0
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__fp_round+0xc>
 b7e:	88 23       	and	r24, r24
 b80:	52 f0       	brmi	.+20     	; 0xb96 <__fp_round+0x20>
 b82:	bb 0f       	add	r27, r27
 b84:	40 f4       	brcc	.+16     	; 0xb96 <__fp_round+0x20>
 b86:	bf 2b       	or	r27, r31
 b88:	11 f4       	brne	.+4      	; 0xb8e <__fp_round+0x18>
 b8a:	60 ff       	sbrs	r22, 0
 b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__fp_round+0x20>
 b8e:	6f 5f       	subi	r22, 0xFF	; 255
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	08 95       	ret

00000b98 <__fp_split3>:
 b98:	57 fd       	sbrc	r21, 7
 b9a:	90 58       	subi	r25, 0x80	; 128
 b9c:	44 0f       	add	r20, r20
 b9e:	55 1f       	adc	r21, r21
 ba0:	59 f0       	breq	.+22     	; 0xbb8 <__fp_splitA+0x10>
 ba2:	5f 3f       	cpi	r21, 0xFF	; 255
 ba4:	71 f0       	breq	.+28     	; 0xbc2 <__fp_splitA+0x1a>
 ba6:	47 95       	ror	r20

00000ba8 <__fp_splitA>:
 ba8:	88 0f       	add	r24, r24
 baa:	97 fb       	bst	r25, 7
 bac:	99 1f       	adc	r25, r25
 bae:	61 f0       	breq	.+24     	; 0xbc8 <__fp_splitA+0x20>
 bb0:	9f 3f       	cpi	r25, 0xFF	; 255
 bb2:	79 f0       	breq	.+30     	; 0xbd2 <__fp_splitA+0x2a>
 bb4:	87 95       	ror	r24
 bb6:	08 95       	ret
 bb8:	12 16       	cp	r1, r18
 bba:	13 06       	cpc	r1, r19
 bbc:	14 06       	cpc	r1, r20
 bbe:	55 1f       	adc	r21, r21
 bc0:	f2 cf       	rjmp	.-28     	; 0xba6 <__fp_split3+0xe>
 bc2:	46 95       	lsr	r20
 bc4:	f1 df       	rcall	.-30     	; 0xba8 <__fp_splitA>
 bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <__fp_splitA+0x30>
 bc8:	16 16       	cp	r1, r22
 bca:	17 06       	cpc	r1, r23
 bcc:	18 06       	cpc	r1, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	f1 cf       	rjmp	.-30     	; 0xbb4 <__fp_splitA+0xc>
 bd2:	86 95       	lsr	r24
 bd4:	71 05       	cpc	r23, r1
 bd6:	61 05       	cpc	r22, r1
 bd8:	08 94       	sec
 bda:	08 95       	ret

00000bdc <__fp_zero>:
 bdc:	e8 94       	clt

00000bde <__fp_szero>:
 bde:	bb 27       	eor	r27, r27
 be0:	66 27       	eor	r22, r22
 be2:	77 27       	eor	r23, r23
 be4:	cb 01       	movw	r24, r22
 be6:	97 f9       	bld	r25, 7
 be8:	08 95       	ret

00000bea <__mulsf3>:
 bea:	0e 94 08 06 	call	0xc10	; 0xc10 <__mulsf3x>
 bee:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
 bf2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
 bf6:	38 f0       	brcs	.+14     	; 0xc06 <__mulsf3+0x1c>
 bf8:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
 bfc:	20 f0       	brcs	.+8      	; 0xc06 <__mulsf3+0x1c>
 bfe:	95 23       	and	r25, r21
 c00:	11 f0       	breq	.+4      	; 0xc06 <__mulsf3+0x1c>
 c02:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 c06:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>
 c0a:	11 24       	eor	r1, r1
 c0c:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>

00000c10 <__mulsf3x>:
 c10:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
 c14:	70 f3       	brcs	.-36     	; 0xbf2 <__mulsf3+0x8>

00000c16 <__mulsf3_pse>:
 c16:	95 9f       	mul	r25, r21
 c18:	c1 f3       	breq	.-16     	; 0xc0a <__mulsf3+0x20>
 c1a:	95 0f       	add	r25, r21
 c1c:	50 e0       	ldi	r21, 0x00	; 0
 c1e:	55 1f       	adc	r21, r21
 c20:	62 9f       	mul	r22, r18
 c22:	f0 01       	movw	r30, r0
 c24:	72 9f       	mul	r23, r18
 c26:	bb 27       	eor	r27, r27
 c28:	f0 0d       	add	r31, r0
 c2a:	b1 1d       	adc	r27, r1
 c2c:	63 9f       	mul	r22, r19
 c2e:	aa 27       	eor	r26, r26
 c30:	f0 0d       	add	r31, r0
 c32:	b1 1d       	adc	r27, r1
 c34:	aa 1f       	adc	r26, r26
 c36:	64 9f       	mul	r22, r20
 c38:	66 27       	eor	r22, r22
 c3a:	b0 0d       	add	r27, r0
 c3c:	a1 1d       	adc	r26, r1
 c3e:	66 1f       	adc	r22, r22
 c40:	82 9f       	mul	r24, r18
 c42:	22 27       	eor	r18, r18
 c44:	b0 0d       	add	r27, r0
 c46:	a1 1d       	adc	r26, r1
 c48:	62 1f       	adc	r22, r18
 c4a:	73 9f       	mul	r23, r19
 c4c:	b0 0d       	add	r27, r0
 c4e:	a1 1d       	adc	r26, r1
 c50:	62 1f       	adc	r22, r18
 c52:	83 9f       	mul	r24, r19
 c54:	a0 0d       	add	r26, r0
 c56:	61 1d       	adc	r22, r1
 c58:	22 1f       	adc	r18, r18
 c5a:	74 9f       	mul	r23, r20
 c5c:	33 27       	eor	r19, r19
 c5e:	a0 0d       	add	r26, r0
 c60:	61 1d       	adc	r22, r1
 c62:	23 1f       	adc	r18, r19
 c64:	84 9f       	mul	r24, r20
 c66:	60 0d       	add	r22, r0
 c68:	21 1d       	adc	r18, r1
 c6a:	82 2f       	mov	r24, r18
 c6c:	76 2f       	mov	r23, r22
 c6e:	6a 2f       	mov	r22, r26
 c70:	11 24       	eor	r1, r1
 c72:	9f 57       	subi	r25, 0x7F	; 127
 c74:	50 40       	sbci	r21, 0x00	; 0
 c76:	9a f0       	brmi	.+38     	; 0xc9e <__mulsf3_pse+0x88>
 c78:	f1 f0       	breq	.+60     	; 0xcb6 <__mulsf3_pse+0xa0>
 c7a:	88 23       	and	r24, r24
 c7c:	4a f0       	brmi	.+18     	; 0xc90 <__mulsf3_pse+0x7a>
 c7e:	ee 0f       	add	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	bb 1f       	adc	r27, r27
 c84:	66 1f       	adc	r22, r22
 c86:	77 1f       	adc	r23, r23
 c88:	88 1f       	adc	r24, r24
 c8a:	91 50       	subi	r25, 0x01	; 1
 c8c:	50 40       	sbci	r21, 0x00	; 0
 c8e:	a9 f7       	brne	.-22     	; 0xc7a <__mulsf3_pse+0x64>
 c90:	9e 3f       	cpi	r25, 0xFE	; 254
 c92:	51 05       	cpc	r21, r1
 c94:	80 f0       	brcs	.+32     	; 0xcb6 <__mulsf3_pse+0xa0>
 c96:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 c9a:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
 c9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ca0:	e4 f3       	brlt	.-8      	; 0xc9a <__mulsf3_pse+0x84>
 ca2:	98 3e       	cpi	r25, 0xE8	; 232
 ca4:	d4 f3       	brlt	.-12     	; 0xc9a <__mulsf3_pse+0x84>
 ca6:	86 95       	lsr	r24
 ca8:	77 95       	ror	r23
 caa:	67 95       	ror	r22
 cac:	b7 95       	ror	r27
 cae:	f7 95       	ror	r31
 cb0:	e7 95       	ror	r30
 cb2:	9f 5f       	subi	r25, 0xFF	; 255
 cb4:	c1 f7       	brne	.-16     	; 0xca6 <__mulsf3_pse+0x90>
 cb6:	fe 2b       	or	r31, r30
 cb8:	88 0f       	add	r24, r24
 cba:	91 1d       	adc	r25, r1
 cbc:	96 95       	lsr	r25
 cbe:	87 95       	ror	r24
 cc0:	97 f9       	bld	r25, 7
 cc2:	08 95       	ret

00000cc4 <__udivmodsi4>:
 cc4:	a1 e2       	ldi	r26, 0x21	; 33
 cc6:	1a 2e       	mov	r1, r26
 cc8:	aa 1b       	sub	r26, r26
 cca:	bb 1b       	sub	r27, r27
 ccc:	fd 01       	movw	r30, r26
 cce:	0d c0       	rjmp	.+26     	; 0xcea <__udivmodsi4_ep>

00000cd0 <__udivmodsi4_loop>:
 cd0:	aa 1f       	adc	r26, r26
 cd2:	bb 1f       	adc	r27, r27
 cd4:	ee 1f       	adc	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	a2 17       	cp	r26, r18
 cda:	b3 07       	cpc	r27, r19
 cdc:	e4 07       	cpc	r30, r20
 cde:	f5 07       	cpc	r31, r21
 ce0:	20 f0       	brcs	.+8      	; 0xcea <__udivmodsi4_ep>
 ce2:	a2 1b       	sub	r26, r18
 ce4:	b3 0b       	sbc	r27, r19
 ce6:	e4 0b       	sbc	r30, r20
 ce8:	f5 0b       	sbc	r31, r21

00000cea <__udivmodsi4_ep>:
 cea:	66 1f       	adc	r22, r22
 cec:	77 1f       	adc	r23, r23
 cee:	88 1f       	adc	r24, r24
 cf0:	99 1f       	adc	r25, r25
 cf2:	1a 94       	dec	r1
 cf4:	69 f7       	brne	.-38     	; 0xcd0 <__udivmodsi4_loop>
 cf6:	60 95       	com	r22
 cf8:	70 95       	com	r23
 cfa:	80 95       	com	r24
 cfc:	90 95       	com	r25
 cfe:	9b 01       	movw	r18, r22
 d00:	ac 01       	movw	r20, r24
 d02:	bd 01       	movw	r22, r26
 d04:	cf 01       	movw	r24, r30
 d06:	08 95       	ret

00000d08 <itoa>:
 d08:	45 32       	cpi	r20, 0x25	; 37
 d0a:	51 05       	cpc	r21, r1
 d0c:	20 f4       	brcc	.+8      	; 0xd16 <itoa+0xe>
 d0e:	42 30       	cpi	r20, 0x02	; 2
 d10:	10 f0       	brcs	.+4      	; 0xd16 <itoa+0xe>
 d12:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__itoa_ncheck>
 d16:	fb 01       	movw	r30, r22
 d18:	10 82       	st	Z, r1
 d1a:	cb 01       	movw	r24, r22
 d1c:	08 95       	ret

00000d1e <__itoa_ncheck>:
 d1e:	bb 27       	eor	r27, r27
 d20:	4a 30       	cpi	r20, 0x0A	; 10
 d22:	31 f4       	brne	.+12     	; 0xd30 <__itoa_ncheck+0x12>
 d24:	99 23       	and	r25, r25
 d26:	22 f4       	brpl	.+8      	; 0xd30 <__itoa_ncheck+0x12>
 d28:	bd e2       	ldi	r27, 0x2D	; 45
 d2a:	90 95       	com	r25
 d2c:	81 95       	neg	r24
 d2e:	9f 4f       	sbci	r25, 0xFF	; 255
 d30:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__utoa_common>

00000d34 <__utoa_ncheck>:
 d34:	bb 27       	eor	r27, r27

00000d36 <__utoa_common>:
 d36:	fb 01       	movw	r30, r22
 d38:	55 27       	eor	r21, r21
 d3a:	aa 27       	eor	r26, r26
 d3c:	88 0f       	add	r24, r24
 d3e:	99 1f       	adc	r25, r25
 d40:	aa 1f       	adc	r26, r26
 d42:	a4 17       	cp	r26, r20
 d44:	10 f0       	brcs	.+4      	; 0xd4a <__utoa_common+0x14>
 d46:	a4 1b       	sub	r26, r20
 d48:	83 95       	inc	r24
 d4a:	50 51       	subi	r21, 0x10	; 16
 d4c:	b9 f7       	brne	.-18     	; 0xd3c <__utoa_common+0x6>
 d4e:	a0 5d       	subi	r26, 0xD0	; 208
 d50:	aa 33       	cpi	r26, 0x3A	; 58
 d52:	08 f0       	brcs	.+2      	; 0xd56 <__utoa_common+0x20>
 d54:	a9 5d       	subi	r26, 0xD9	; 217
 d56:	a1 93       	st	Z+, r26
 d58:	00 97       	sbiw	r24, 0x00	; 0
 d5a:	79 f7       	brne	.-34     	; 0xd3a <__utoa_common+0x4>
 d5c:	b1 11       	cpse	r27, r1
 d5e:	b1 93       	st	Z+, r27
 d60:	11 92       	st	Z+, r1
 d62:	cb 01       	movw	r24, r22
 d64:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <strrev>

00000d68 <strrev>:
 d68:	dc 01       	movw	r26, r24
 d6a:	fc 01       	movw	r30, r24
 d6c:	67 2f       	mov	r22, r23
 d6e:	71 91       	ld	r23, Z+
 d70:	77 23       	and	r23, r23
 d72:	e1 f7       	brne	.-8      	; 0xd6c <strrev+0x4>
 d74:	32 97       	sbiw	r30, 0x02	; 2
 d76:	04 c0       	rjmp	.+8      	; 0xd80 <strrev+0x18>
 d78:	7c 91       	ld	r23, X
 d7a:	6d 93       	st	X+, r22
 d7c:	70 83       	st	Z, r23
 d7e:	62 91       	ld	r22, -Z
 d80:	ae 17       	cp	r26, r30
 d82:	bf 07       	cpc	r27, r31
 d84:	c8 f3       	brcs	.-14     	; 0xd78 <strrev+0x10>
 d86:	08 95       	ret

00000d88 <_exit>:
 d88:	f8 94       	cli

00000d8a <__stop_program>:
 d8a:	ff cf       	rjmp	.-2      	; 0xd8a <__stop_program>
